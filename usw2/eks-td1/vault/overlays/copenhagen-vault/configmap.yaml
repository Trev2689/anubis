# apiVersion: v1
# kind: ConfigMap
# metadata:
#   name: controller-revision-monitor-scripts
#   namespace: copenhagen-vault
# data:
#   controller-revision-monitor.sh: |
#     #!/bin/bash

#     # Set default values for variables if not provided
#     STATEFULSET_NAME=${STATEFULSET_NAME:-copenhagen-vault}
#     NAMESPACE=${NAMESPACE:-copenhagen-vault}
#     POLL_INTERVAL=${POLL_INTERVAL:-60}

#     # Function to get the controller revisions in YAML format
#     get_controller_revisions() {
#       kubectl get controllerrevision -n $NAMESPACE -l "app.kubernetes.io/instance=copenhagen,app.kubernetes.io/name=vault" -o yaml
#     }

#     # Function to compare two YAML representations of controller revisions
#     compare_controller_revisions() {
#       diff -u <(echo "$1") <(echo "$2")
#     }

#     # Function to restart a pod by name
#     restart_pod() {
#       local pod_name=$1
#       echo "Restarting pod $pod_name"
#       kubectl delete pod $pod_name -n $NAMESPACE
#       # Wait until the pod is ready again
#       kubectl wait --for=condition=ready pod $pod_name -n $NAMESPACE --timeout=300s
#     }

#     # Function to restart all pods except the one labeled as "vault-active"
#     restart_pods() {
#       local pods=$(kubectl get pods -n $NAMESPACE -l "app.kubernetes.io/instance=copenhagen,app.kubernetes.io/name=vault" -o json | jq -r '.items[] | .metadata.name')
#       for pod in $pods; do
#         if [[ -z $(kubectl get pod $pod -n $NAMESPACE -o json | jq -r '.metadata.labels["vault-active"]') ]]; then
#           restart_pod $pod
#         fi
#       done
#     }

#     # Function to restart the pod labeled as "vault-active"
#     restart_active_pod() {
#       local active_pod=$(kubectl get pods -n $NAMESPACE -l "app.kubernetes.io/instance=copenhagen,app.kubernetes.io/name=vault,vault-active=true" -o json | jq -r '.items[] | .metadata.name')
#       if [[ ! -z "$active_pod" ]]; then
#         restart_pod $active_pod
#       fi
#     }

#     # Function to restart the statefulset
#     restart_statefulset() {
#       pods=$(kubectl get pods -n $NAMESPACE -l "app.kubernetes.io/instance=copenhagen,app.kubernetes.io/name=vault" -o json | jq -r '.items[] | .metadata.name')
#       active_pod=""
#       for pod in $pods; do
#         if kubectl get pod $pod -n $NAMESPACE -o json | jq -e '.metadata.labels["vault-active"] == "true"' > /dev/null; then
#           active_pod=$pod
#         else
#           restart_pod $pod
#         fi
#       done

#       if [ ! -z "$active_pod" ]; then
#         restart_pod $active_pod
#       fi
#     }

#     # Main function to monitor controller revisions and trigger pod restarts when changes are detected
#     main() {
#       previous_revisions=$(get_controller_revisions)
#       echo "Monitoring controller revisions..."
#       while true; do
#         sleep $POLL_INTERVAL
#         current_revisions=$(get_controller_revisions)
#         if ! compare_controller_revisions "$previous_revisions" "$current_revisions" >/dev/null; then
#           echo "ControllerRevision change detected"
#           restart_statefulset
#           echo "Pods restarted successfully"
#           previous_revisions="$current_revisions"
#         fi
#       done
#     }

#     # Call the main function to start monitoring
#     main
